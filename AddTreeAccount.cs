using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Text.RegularExpressions;

namespace Purchase
{
    public partial class AddTreeAccount : UserControl
    {
        Purchase.AccountingSystem dbContext;
        Purchase.AccountingSystem db = new Purchase.AccountingSystem();
        Purchase.AccountingSystem dbContextLevel2;
        TreeAccount newAccount;
        bool firstOpen = true;
        bool isEditFrom = false;
        public AddTreeAccount()
        {
            InitializeComponent();
            CancelBtn.Visible = false;
            Ini();
            db.TreeAccounts.Load();
            
        }

        private void Ini()
        {
            dbContext = new Purchase.AccountingSystem();
            dbContext.TreeAccounts.Where(d => d.parentId == 0).Load();
            bindingSource1.DataSource = dbContext.TreeAccounts.Local.ToBindingList();

        }

        public AddTreeAccount(int id)
        {
            InitializeComponent();
            Ini();
            db.TreeAccounts.Where(d => d.Id == id).Load();
            AccountTreeSource.DataSource = db.TreeAccounts.Local.ToBindingList();
            dbContextLevel2 = new Purchase.AccountingSystem();
            string test = db.TreeAccounts.Select(d => d.type).First().ToString();
            int level = int.Parse(test);
            // Call the Load method to get the data for the given DbSet from the database.
            dbContextLevel2.TreeAccounts.Where(j => j.type == level || j.Id == level).Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource2.DataSource = dbContextLevel2.TreeAccounts.Local.ToBindingList();
            isEditFrom = true;
        }


        private void AccountLevel_EditValueChanged(object sender, EventArgs e)
        {
            if (AccountLevel.EditValue != null)
            {
                dbContextLevel2 = new Purchase.AccountingSystem();
                int level = (int)AccountLevel.EditValue;
                // Call the Load method to get the data for the given DbSet from the database.
                dbContextLevel2.TreeAccounts.Where(j => j.type == level || j.Id == level).Load();
                // This line of code is generated by Data Source Configuration Wizard
                bindingSource2.DataSource = dbContextLevel2.TreeAccounts.Local.ToBindingList();
            }
        }

        private void AccountSubLevel_EditValueChanged(object sender, EventArgs e)
        {
            int current=0;
            string max = "";
            if (AccountSubLevel.EditValue != null)
            {
                 current = (int)AccountSubLevel.EditValue;
                 max = "";

                try
                {
                    max = dbContextLevel2.TreeAccounts.Where(f => f.parentId == current).Select(f => f.Id).Max().ToString();
                 
                }
                catch (Exception )
                {
                    max = current + (0 + "");
                }
          
                
            }
            else
            {
                int leng = (current + "").Length;
                string toReplace = max.Remove(0, leng);
                int maxId = int.Parse(toReplace) + 1;
                string nextId = (int)AccountSubLevel.EditValue + (maxId + "");
                AccountNumber.Text = nextId;
            }
        }

        private void SaveBtn_Click(object sender, EventArgs e)
        {
           
                string ErrorMessage = "";
                if (AccountName.Text.Equals(""))
                    ErrorMessage = "الرجاء ادخال الأسم";
                else if (AccountLevel.Text.Equals("-اختر-"))
                    ErrorMessage = "الرجاء اختيار طبيعة الحساب";
                else if (AccountSubLevel.Text.Equals("-اختر-"))
                    ErrorMessage = "الرجاء اختيار التدرج";
                if (ErrorMessage.Equals(""))
                {
                    try
                    {
                        if (!isEditFrom)
                        {
                            newAccount = new TreeAccount();
                            newAccount.Id = int.Parse(AccountNumber.Text);
                            newAccount.Name = AccountName.Text;
                            newAccount.ismoney = AccountStauts.Checked;
                            newAccount.parentId = (int)AccountSubLevel.EditValue;
                            newAccount.debit = 0;
                            newAccount.credit = 0;
                            newAccount.active = AccountStauts.Checked;
                            newAccount.dt = AccountDate.DateTime;
                            newAccount.note = AccountNotes.Text;
                            newAccount.type = (int)AccountLevel.EditValue;
                            newAccount.isparent = accountIsParent.Checked;
                            db.TreeAccounts.Add(newAccount);
                        }
                        
                        db.SaveChanges();

                        if (!isEditFrom)
                        {
                            AccountNotes.Text = "";
                            AccountName.Text = "";
                            AccountDate.Text = "";
                            AccountNumber.Text = "";
                            AccountStauts.Checked = false;
                            
                            AccountSubLevel.EditValue = null;
                            AccountLevel.EditValue = null;
                        }
                    }
                    catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
                    {
                        Exception raise = dbEx;
                        foreach (var validationErrors in dbEx.EntityValidationErrors)
                        {
                            foreach (var validationError in validationErrors.ValidationErrors)
                            {
                                string message = string.Format("{0}:{1}",
                                    validationErrors.Entry.Entity.ToString(),
                                    validationError.ErrorMessage);
                                raise = new InvalidOperationException(message, raise);
                            }
                        }
                        throw raise;
                    }
                    catch (Exception dbEx)
                    {
                        Exception raise = dbEx;
                        var val = dbEx.InnerException;
                        MessageBox.Show(val.ToString());
                        //throw raise;
                    }
                }
                else
                    MessageBox.Show( ErrorMessage);       
        }

        private void CancelBtn_Click(object sender, EventArgs e)
        {
            if (isEditFrom)
            {
                CancelBtn.DialogResult = DialogResult.Cancel;
                this.ParentForm.Close();
            }
        }

    }
}
