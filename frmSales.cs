using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Base;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using DevExpress.XtraEditors.Controls;

namespace Purchase
{
    public partial class frmSales : Form
    {
        private Purchase.AccountingSystem dbContext;
        int i;
        public frmSales()
        {
            InitializeComponent();
            GetCustomers();
            GetCurrency();
            GetPayType();

            Purchase.AccountingSystem dbContext = new Purchase.AccountingSystem();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Items.Load();
            dbContext.SaleInvoiceDetails.Where(y => y.SalesInvoicesId == i).Load();
            // This line of code is generated by Data Source Configuration Wizard
            grditem.DataSource = dbContext.SaleInvoiceDetails.Local.ToBindingList();
            itemBindingSource.DataSource = dbContext.Items.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.VendorSets.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource1.DataSource = dbContext.VendorSets.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.CurrencySets.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource2.DataSource = dbContext.CurrencySets.Local.ToBindingList();
        }
        
        private void cmdClose_Click(object sender, EventArgs e)
        {
            base.Dispose();
        }

        private void cmdNew_Click(object sender, EventArgs e)
        {
            txtInvoiceNo.Text = "";
            txtInvoiceNo.Tag = 0;
            txtInvoiceDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            cmbCustomerID.EditValue = "0";
            cmbPaymentType.EditValue = "0";
            cmbCurreny.EditValue = "0";
            txtRate.Text = "0";
            txtChequeDate.Text = DateTime.Now.ToString("yyyy-MM-dd");
            txtChequeNo.Text = "";
            chkCancel.Checked = false;
            chkPaid.Checked = false;
            txtTax.Text="0.00";
            txtDiscount.Text = "0.00";
            txtNotes.Text = "";
            txtBase.Text = "0.00";
            txtTotal.Text = "0.00";
            txtRate.Enabled = false;
        }

        private void frmSales_Load(object sender, EventArgs e)
        {
            cmdNew_Click(null,null);
        }

        private void cmdSave_Click(object sender, EventArgs e)
        {
            if (cmbCustomerID.EditValue==null)
            {
                MessageBox.Show("الرجاء إختيار العميل ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Error);
                cmbCustomerID.Focus();
                return;
            }
            else if (cmbCurreny.EditValue == null)
            {
                MessageBox.Show("الرجاء إختيار  العملة ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Error);
                cmbCurreny.Focus();
                return;
            }
            else if (cmbPaymentType.EditValue == null)
            {
                MessageBox.Show("الرجاء إختيار طريقة الدفع ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Error);
                cmbPaymentType.Focus();
                return;
            }
            if (gridView1.RowCount == 0) {
                MessageBox.Show("الرجاء ادخال تفاصيل الفاتورة ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Error);
                gridView1.Focus();
                return;
            }
            if (int.Parse(txtInvoiceNo.Tag.ToString()) == 0) {
                using (var db = new AccountingSystem())
                {
                    var InvoiceEntity = db.SalesInvoices.Create();
                    InvoiceEntity.InvoiceDate = DateTime.Parse(txtInvoiceDate.Text);
                    InvoiceEntity.InoviceNo = "inv";
                    InvoiceEntity.CustomerID = int.Parse(cmbCustomerID.EditValue.ToString());
                    InvoiceEntity.CurrencyID = int.Parse(cmbCurreny.EditValue.ToString());
                    InvoiceEntity.Rate = double.Parse(txtRate.Text);
                    InvoiceEntity.PaymentType =int.Parse(cmbPaymentType.EditValue.ToString());
                    if (InvoiceEntity.PaymentType == 2) {
                        InvoiceEntity.ChequeNo = txtChequeNo.Text;
                        InvoiceEntity.ChequeDate = DateTime.Parse(txtChequeDate.Text);
                    }
                    InvoiceEntity.Discount = double.Parse(txtDiscount.Text);
                    InvoiceEntity.Tax = double.Parse(txtTax.Text);
                    InvoiceEntity.Notes = txtNotes.Text;
                    InvoiceEntity.UserID = 1;
                    if (chkCancel.Checked)
                        InvoiceEntity.Canceled = 1;
                    else
                        InvoiceEntity.Canceled = 0;
                    if (chkPaid.Checked)
                        InvoiceEntity.Paid = 1;
                    else
                        InvoiceEntity.Paid = 0;
                    try
                    {
                        db.SalesInvoices.Add(InvoiceEntity);
                        db.SaveChanges(); 
                        txtInvoiceNo.Tag = InvoiceEntity.Id;
                        MessageBox.Show("تم الحفظ بنجاح ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (Exception dbEx)
                    {
                        Exception raise = dbEx;
                        var val = dbEx.InnerException;
                        MessageBox.Show(val.ToString());
                    }
                }
            }
                else if (int.Parse(txtInvoiceNo.Tag.ToString()) != 0) {
                try
                {
                    using (var db = new AccountingSystem())
                    {
                       int Invoiceid = int.Parse(txtInvoiceNo.Tag.ToString());
                       var InvoiceEntity = db.SalesInvoices.First(i => i.Id == Invoiceid);
                       InvoiceEntity.InoviceNo = InvoiceEntity.InoviceNo;
                       InvoiceEntity.InvoiceDate = DateTime.Parse(txtInvoiceDate.Text);
                       InvoiceEntity.CustomerID = int.Parse(cmbCustomerID.EditValue.ToString());
                       InvoiceEntity.CurrencyID = int.Parse(cmbCurreny.EditValue.ToString());
                       InvoiceEntity.Rate = int.Parse(txtRate.Text);
                       if (InvoiceEntity.PaymentType == 2)
                       {
                           InvoiceEntity.ChequeNo = txtChequeNo.Text;
                           InvoiceEntity.ChequeDate = DateTime.Parse(txtChequeDate.Text);
                       }
                       InvoiceEntity.Discount = double.Parse(txtDiscount.Text);
                       InvoiceEntity.Tax = double.Parse(txtTax.Text);
                       InvoiceEntity.UserID = 1;
                       InvoiceEntity.Notes = txtNotes.Text;
                       if (chkCancel.Checked)
                           InvoiceEntity.Canceled = 1;
                       else
                           InvoiceEntity.Canceled = 0;
                       if (chkPaid.Checked)
                           InvoiceEntity.Paid = 1;
                       else
                           InvoiceEntity.Paid = 0;
                            db.SaveChanges();
                        /*if (int.Parse(txtInvoiceNo.Tag.ToString()) != 0) {
                            dbContext.SaveChanges();
                        }*/
                        MessageBox.Show("تم الحفظ بنجاح ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                catch (Exception dbEx)
                {
                    Exception raise = dbEx;
                    var val = dbEx.InnerException;
                    MessageBox.Show(val.ToString());
                }
                
            }
            try
            {
                using (var db = new AccountingSystem())
                {
                    int Invoiceid = int.Parse(txtInvoiceNo.Tag.ToString());
                    if (gridView1 != null)
                        if (int.Parse(txtInvoiceNo.Tag.ToString()) != 0)
                            dbContext.Database.ExecuteSqlCommand("DELETE FROM SaleInvoiceDetails WHERE SalesInvoicesId=" + int.Parse(txtInvoiceNo.Tag.ToString()));
                    for (int i = 0; i < gridView1.RowCount; i++)
                    {
                        var InvoiceDetailsEntity = db.SaleInvoiceDetails.Create();
                        InvoiceDetailsEntity.ItemID = int.Parse(gridView1.GetRowCellValue(i, "ItemID").ToString());
                        InvoiceDetailsEntity.Quantity = int.Parse(gridView1.GetRowCellValue(i, "Quantity").ToString());
                        InvoiceDetailsEntity.Unit = gridView1.GetRowCellValue(i, "Unit").ToString();
                        InvoiceDetailsEntity.Price = Double.Parse(gridView1.GetRowCellValue(i, "Price").ToString());
                        InvoiceDetailsEntity.SalesInvoicesId = int.Parse(txtInvoiceNo.Tag.ToString());
                        db.SaleInvoiceDetails.Add(InvoiceDetailsEntity);//add details in master object
                    }
                    db.SaveChanges();
                    DisplayInvoice(Invoiceid);
                }
            }
            catch (Exception dbEx)
            {
                Exception raise = dbEx;
                var val = dbEx.InnerException;
                MessageBox.Show(val.ToString());
            }
                
                
            }
        private void DisplayInvoice(int InvoiceID)
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.SalesInvoices
                         where c.Id.Equals(InvoiceID)
                         select new
                         {
                             c.Id,
                             c.InoviceNo,
                             c.InvoiceDate,
                             c.CustomerID,
                             c.CurrencyID,
                             c.Rate,
                             c.PaymentType,
                             c.ChequeNo,
                             c.ChequeDate,
                             c.Paid,
                             c.Tax,
                             c.Discount,
                             c.Notes,
                             c.Canceled
                         };
                var list = dc.ToList();
                if (list.Count != 0)
                {
                    i = list[0].Id;
                    txtInvoiceNo.Tag = list[0].Id.ToString();
                    txtInvoiceNo.Text = list[0].Id.ToString();
                    txtInvoiceDate.Text = list[0].InvoiceDate.ToString("yyyy-MM-dd");
                    cmbCustomerID.EditValue = list[0].CustomerID;
                    cmbCurreny.EditValue = list[0].CurrencyID;
                    if (list[0].CurrencyID != 1)
                    {
                        txtRate.Enabled = true;
                    }
                    else
                    {
                        txtRate.Enabled = false;
                    }
                    txtRate.Text = list[0].Rate.ToString();
                    cmbPaymentType.EditValue = list[0].PaymentType;
                    txtChequeDate.EditValue = list[0].ChequeDate;
                    txtChequeNo.Text = list[0].ChequeNo;
                    txtTax.Text = list[0].Tax.ToString();
                    txtDiscount.Text = list[0].Discount.ToString();
                    if (!string.IsNullOrEmpty(list[0].Notes))
                    {
                        txtNotes.Text = list[0].Notes.ToString();
                    }
                    else
                    {
                        txtNotes.Text = "";
                    }
                    if (list[0].Paid == 1)
                        chkPaid.Checked = true;
                    if (list[0].Canceled == 1)
                        chkCancel.Checked = true;
                    dbContext = new Purchase.AccountingSystem();
                    // Call the Load method to get the data for the given DbSet from the database.
                    dbContext.SaleInvoiceDetails.Where(y => y.SalesInvoicesId == i).Load();
                    // This line of code is generated by Data Source Configuration Wizard
                    grditem.DataSource = dbContext.SaleInvoiceDetails.Local.ToBindingList();
                    grditem.RefreshDataSource();
                    gridView1_RowUpdated(null, null);
                
                }else{
                    MessageBox.Show("عفوا لاتوجد فاتورة بهذا الرقم", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
        private void GetPayType()
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.PaymentTypes
                         select new { c.PaymentTypeID, c.PaymentTypeName };
                cmbPaymentType.Properties.DataSource = dc.ToList();
                cmbPaymentType.Properties.ValueMember = "PaymentTypeID";
                cmbPaymentType.Properties.DisplayMember = "PaymentTypeName";
            }
        }
        private void GetCustomers()
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.VendorSets
                         select new { c.Id, c.VendorName };
                cmbCustomerID.Properties.DataSource = dc.ToList();
                cmbCustomerID.Properties.ValueMember = "Id";
                cmbCustomerID.Properties.DisplayMember = "VendorName";
            }
        }
        private void GetCurrency()
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.CurrencySets
                         select new { c.Id, c.CurrencyName };
                cmbCurreny.Properties.DataSource = dc.ToList();
                cmbCurreny.Properties.ValueMember = "Id";
                cmbCurreny.Properties.DisplayMember = "CurrencyName";
            }
        }


        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtInvoiceNo.Text)) { 
                MessageBox.Show("الرجاء ادخال رقم الفاتورة ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtInvoiceNo.Focus();
                return;
            }
            DisplayInvoice(int.Parse(txtInvoiceNo.Text));
        }

        private void cmbPaymentType_EditValueChanged(object sender, EventArgs e)
        {
            if (int.Parse(cmbPaymentType.EditValue.ToString()) == 1)
            {
                txtChequeNo.Enabled = false;
                txtChequeDate.Enabled = false;
                chkPaid.Enabled = false;
            }
            else if (int.Parse(cmbPaymentType.EditValue.ToString()) == 2)
            {
                txtChequeNo.Enabled = true;
                txtChequeDate.Enabled = true;
                chkPaid.Enabled = true;
            }
        }

        private void cmbCurreny_EditValueChanged(object sender, EventArgs e)
        {
            if (int.Parse(cmbCurreny.EditValue.ToString()) == 1)
            {
                txtRate.Enabled = false;
            }
            else if (int.Parse(cmbCurreny.EditValue.ToString()) != 1)
            {
                txtRate.Enabled = true;
            }
        }
        
        private void gridView1_RowUpdated(object sender, RowObjectEventArgs e)
        {
            double sum = 0;
            if (gridView1.RowCount != 0) {
                for (int i = 0; i < gridView1.RowCount; i++)
                {
                    sum = sum + double.Parse(gridView1.GetRowCellValue(i, "Price").ToString());
                }
                txtBase.Text = sum.ToString();
                txtTotal.Text = (sum - double.Parse(txtDiscount.Text) + double.Parse(txtTax.Text)).ToString();
            }
        }

        private void gridView1_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            if (gridView1.FocusedColumn.FieldName == "ItemID")
            {
                e.Value = Convert.ToString(e.Value);
                if (e.Value == null)
                {
                    e.Valid = false;
                    e.ErrorText = "الرجاء اختيار الصنف";
                }
            }
            if (gridView1.FocusedColumn.FieldName == "Quantity")
            {
                int quant = Convert.ToInt32(e.Value);
                if (quant <= 0)
                {
                    e.Valid = false;
                    e.ErrorText = "الرجاء ادخال قيمة موجبة او اكبر من الصفر";
                }
            }
            if (gridView1.FocusedColumn.FieldName == "Unit")
            {
                if (e.Value.ToString()=="")
                {
                    e.Valid = false;
                    e.ErrorText = "الرجاء ادخال الوحدة";
                }
            }
            if (gridView1.FocusedColumn.FieldName == "Price")
            {
                Double quant = Convert.ToDouble(e.Value);
                if (quant <= 0)
                {
                    e.Valid = false;
                    e.ErrorText = "الرجاء ادخال قيمة موجبة او اكبر من الصفر";
                }
            }
        }
        private void gridView1_InvalidValueException(object sender, InvalidValueExceptionEventArgs e)
        {
            //Do not perform any default action 
            e.ExceptionMode = DevExpress.XtraEditors.Controls.ExceptionMode.NoAction;
            //Show the message with the error text specified 
            MessageBox.Show(e.ErrorText);
        }

        private void cmdReport_Click(object sender, EventArgs e)
        {
            frmSalesReports frm = new frmSalesReports();
            frm.Visible = true;
        }
    }
}
