using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity.Validation;
using System.Data.Entity;
using DevExpress.XtraBars.Docking2010.Views.WindowsUI;
using DevExpress.XtraBars.Docking2010.Customization;

namespace Purchase
{
    public partial class ItemsForm : DevExpress.XtraEditors.XtraUserControl
    {
        Boolean isEditForm = false;
        string Id = "";
        Purchase.AccountingSystem dbContextItems = new Purchase.AccountingSystem();
        Purchase.AccountingSystem dbContextDetails = new Purchase.AccountingSystem();
        Item addItem;
        string currentCode = "";
        int i;
        public ItemsForm()
        {
            InitializeComponent();

            bindingSource1.DataSource = dbContextDetails.ItemMeasurementUnits.Local.ToBindingList();
            Ini();
            int NextCode = 1;
            Id = 1 + "";
            try
            {
                NextCode = dbContextItems.Items.ToList().Max(e => Convert.ToInt32(e.Code)) + 1;
                Id = (int.Parse(dbContextItems.Items.Select(d => d.Id).Max().ToString()) + 1) + "";
            }
            catch (Exception)
            { }
            i = int.Parse(Id);
            dbContextDetails.ItemMeasurementUnits.Where(y => y.ItemId == i).Load();
            ItemCode.Text = NextCode + "";
            Cancel.Visible = false;

        }

        public ItemsForm(string Code,string Id)
        {
            this.Id = Id;
            isEditForm = true;
            currentCode = Code;
            InitializeComponent();
            i = int.Parse(Id);
            bindingSource1.DataSource = dbContextItems.ItemMeasurementUnits.Local.ToBindingList();
            dbContextItems.ItemMeasurementUnits.Where(y => y.ItemId == i).Load();
            Ini();
            itemBindingSource.DataSource = dbContextItems.Items.Where(c => c.Code == Code).ToList();
        }

        private void Ini()
        {
            // This line of code is generated by Data Source Configuration Wizard
            DetailGrid.DataSource = bindingSource1;
            dbContextItems.Wharehouses.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource2.DataSource = dbContextItems.Wharehouses.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the Load method to get the data for the given DbSet from the database.
            dbContextItems.ItemGroups.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource3.DataSource = dbContextItems.ItemGroups.Local.ToBindingList();
            dbContextItems.Items.Load();
            addItem = new Item();
            //itemBindingSource.DataSource = dbContext.Items.Local.ToBindingList();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContextItems.SupplierSets.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource4.DataSource = dbContextItems.SupplierSets.Local.ToBindingList();

            dbContextItems.VendorSets.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource5.DataSource = dbContextItems.VendorSets.Local.ToBindingList();
        }
        private void saveBtn_Click(object sender, EventArgs e)
        {
            using (var db = new AccountingSystem())
            {
                string ErrorMessage = "";
                if (ItemCode.Text.Equals(""))
                    ErrorMessage = "الرجاء ادخال الكود";
                else if (ItemName.Text.Equals(""))
                    ErrorMessage = "الرجاء ادخال الأسم";
                else if (ItemExpireDate.Text.Equals(""))
                    ErrorMessage = "الرجاء ادخال تاريخ الانتهاء";
                else if (TypeBox.SelectedItem.Equals("-اختر-"))
                    ErrorMessage = " الرجاء اختيار النوع";
                else if (comboBoxStore.EditValue== null)
                    ErrorMessage = " الرجاء اختيار المخزن";
                else if (ItemGroup.EditValue == null)
                    ErrorMessage = " الرجاء اختيار المجموعة";

                if (ErrorMessage.Equals(""))
                {
                    try
                    {
                        if(!isEditForm)
                        {
                            addItem.Name = ItemName.Text;
                            addItem.Code = ItemCode.Text;
                            addItem.Type = TypeBox.SelectedItem.ToString();
                            addItem.ExpireDate = DateTime.Now;
                            addItem.Status = ItemStatus.Checked;
                            addItem.WharehouseId = int.Parse(comboBoxStore.EditValue.ToString());
                            addItem.ItemGroupsId = int.Parse(ItemGroup.EditValue.ToString());
                            addItem.Discription = ItemDiscritption.Text;
                            addItem.SupplierId = (ItemSupplireId.EditValue == null) ? 0 : int.Parse(ItemSupplireId.EditValue.ToString());
                            addItem.VendorId = (ItemVendorId.EditValue == null) ? 0 : int.Parse(ItemVendorId.EditValue.ToString());
                            addItem.ExpireAlarmDays = (ItemExpireAlarm.Text.Equals("")) ? 0 : int.Parse(ItemExpireAlarm.Text);
                            addItem.FreezDate = (ItemFreezDays.Text.Equals("")) ? 0 : int.Parse(ItemFreezDays.Text);
                            addItem.MonthlySale = (ItemMonthlySale.Text.Equals("")) ? 0 : int.Parse(ItemMonthlySale.Text);
                            addItem.MinQouantity = (ItemMinQuant.Text.Equals("")) ? 0 : int.Parse(ItemMinQuant.Text);

                            dbContextItems.Items.Add(addItem);
                        }
                        dbContextItems.SaveChanges();
                        dbContextDetails.SaveChanges();
                        if (!isEditForm)
                        {
                            ItemName.Text = "";
                            TypeBox.SelectedIndex = 0;
                            comboBoxStore.DeselectAll();
                            ItemGroup.DeselectAll();
                            ItemExpireDate.Text = "";
                            DetailGrid.RefreshDataSource();
                            ItemDiscritption.Text = "";
                            ItemMinQuant.Text = "";
                            ItemMonthlySale.Text = "";
                            ItemFreezDays.Text = "";
                            ItemCode.Text = (int.Parse(ItemCode.Text) + 1) + "";
                            Id = (int.Parse(dbContextItems.Items.Select(d => d.Id).Max().ToString()) + 1) + "";
                            DetGridView.SelectAll();
                            DetGridView.DeleteSelectedRows();
                            return;
                        }
                      
                    }
                    catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
                    {
                        Exception raise = dbEx;
                        foreach (var validationErrors in dbEx.EntityValidationErrors)
                        {
                            foreach (var validationError in validationErrors.ValidationErrors)
                            {
                                string message = string.Format("{0}:{1}",
                                    validationErrors.Entry.Entity.ToString(),
                                    validationError.ErrorMessage);
                                raise = new InvalidOperationException(message, raise);
                            }
                        }
                        throw raise;
                    }
                    catch (Exception dbEx)
                    {
                        Exception raise = dbEx;
                        var val = dbEx.InnerException;
                        MessageBox.Show(val.ToString());
                        //throw raise;
                    }
                }
                else
                    MessageBox.Show( ErrorMessage);
               
            }
        }

        private void ItemCode_EditValueChanged(object sender, EventArgs e)
        {
            
            using (var db = new AccountingSystem())
            {
                if (db.Items.Any(o => o.Code == ItemCode.Text))
                    if (!ItemCode.Text.Equals(currentCode)&&isEditForm)
                    dxErrorProvider1.SetError(ItemCode, "هذا الكود موجود", DevExpress.XtraEditors.DXErrorProvider.ErrorType.Critical);
                else
                    dxErrorProvider1.ClearErrors();
            }
        }

      

        private void Cancel_Click(object sender, EventArgs e)
        {
            Cancel.DialogResult = DialogResult.Cancel;
            this.ParentForm.Close();
        }

        private void DetailGrid_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                popupMenu1.ShowPopup(Control.MousePosition);
        }

        private void MenuDeleteBtn_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("هل تريد حذف هذه السجل؟", "تأكيد", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dialogResult == DialogResult.Yes)
            
            DetGridView.DeleteRow(DetGridView.FocusedRowHandle);
            dbContextDetails.SaveChanges();
        }

        private void DetGridView_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            DetGridView.SetRowCellValue(DetGridView.FocusedRowHandle,"ItemId",Id);
            DetGridView.SetRowCellValue(DetGridView.FocusedRowHandle, "Unit", "قطعة");
            DetGridView.SetRowCellValue(DetGridView.FocusedRowHandle, "NumOfPieces", "1");
        }

        private void groupBtn_Click(object sender, EventArgs e)
        {
            FlyoutAction action = new FlyoutAction();
            action.Caption = "المجموعات";
            MyFlyoutDialog dialog = new MyFlyoutDialog(this.ParentForm, action, new GroupForms());
            dialog.AutoSizeMode = System.Windows.Forms.AutoSizeMode.GrowOnly;
            dialog.StartPosition = FormStartPosition.CenterScreen;
            dialog.Width = 200;
            DialogResult f= dialog.ShowDialog();
            if(f == DialogResult.Cancel)
            {
                dbContextItems = new Purchase.AccountingSystem();
                bindingSource3.DataSource = dbContextItems.ItemGroups.ToList();
                ItemGroup.Refresh();
            }
        }

        public class MyFlyoutDialog : FlyoutDialog
        {
            public MyFlyoutDialog(Form owner, FlyoutAction action, Control control)
                : base(owner, action)
            {
                FlyoutControl = control;
            }
        }

        private void ItemExpireCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (ItemExpireCheck.Checked)
            {
                ItemExpireDate.Visible = true;
                ExpireLabel.Visible = true ;
            }
            else
            {
                ItemExpireDate.Visible = false;
                ExpireLabel.Visible = false ;
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            Form storeForm = new Form();
            storeForm.Controls.Add(new StoresForm("AddStore"));
            storeForm.BackColor = System.Drawing.Color.White;
            storeForm.StartPosition = FormStartPosition.CenterScreen;
            storeForm.WindowState = FormWindowState.Maximized;
            DialogResult x = storeForm.ShowDialog();
            if (x == DialogResult.Cancel)
            {
                dbContextItems = new Purchase.AccountingSystem();
                bindingSource2.DataSource = dbContextItems.Wharehouses.ToList();
                comboBoxStore.Refresh();
            }
        }

        private void ItemsForm_Load(object sender, EventArgs e)
        {

        }
      
        
        

    }
}
