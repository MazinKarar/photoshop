using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;

namespace Purchase
{
    public partial class AddUser : DevExpress.XtraEditors.XtraUserControl
    {
        public AddUser()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            Purchase.AccountingSystem dbContext = new Purchase.AccountingSystem();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Groups.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource1.DataSource = dbContext.Groups.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Branches.Load();
            // This line of code is generated by Data Source Configuration Wizard
            bindingSource2.DataSource = dbContext.Branches.Local.ToBindingList();
        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void lookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void AddUser_Load(object sender, EventArgs e)
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.Users
                         //where c.Id.Equals(InvoiceID)
                         select new
                         {
                             c.Id,
                         };
                var list = dc.ToList();
                int id = list.Count;
                Code.Text = (id + 1).ToString();
            }
            fillsearch();
        }

        private void save_Click(object sender, EventArgs e)
        {
            news.Enabled = true;
            save.Enabled = false;
            update.Enabled = true;
            using (var db = new AccountingSystem())
            {
                var User = db.Users.Create();
                User.UCode = Code.Text;
                User.UName = search.Text;
                User.UStatus = Status.Checked.ToString(); 
                User.UBranch = Branch.EditValue.ToString();
                User.UPassword = Password.Text;
                User.UGroup = Group.EditValue.ToString();
                db.Users.Add(User);

                try
                {
                    db.SaveChanges();
                }
                catch (Exception dbEx)
                {
                    Exception raise = dbEx;
                    var val = dbEx.InnerException;
                    MessageBox.Show(val.ToString());
                }
                 MessageBox.Show("تم الحفظ بنجاح ", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            fillsearch();
        }

        private void news_Click(object sender, EventArgs e)
        {
            update.Enabled = false;
            save.Enabled = true;
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.Users
                         //where c.Id.Equals(InvoiceID)
                         select new
                         {
                             c.Id,
                         };
                var list = dc.ToList();
                int id = list.Count;
                Code.Text = (id + 1).ToString();
            }
            search.Text = "";
            Password.Text = "";
            Status.Checked = false;
            
        }

        private void update_Click(object sender, EventArgs e)
        {
            save.Enabled = false;
            news.Enabled = true;
            update.Enabled = true;
            VendorSet Sup = new VendorSet();
            //InitializeComponent();
            using (var db = new AccountingSystem())
            {
                try
                {

                    var User = db.Users.First(x => x.UCode.Equals(Code.Text));
                    User.UCode = Code.Text;
                    User.UName = search.Text;
                    User.UStatus = Status.Checked.ToString();
                    User.UBranch = Branch.EditValue.ToString();
                    User.UPassword = Password.Text;
                    User.UGroup = Group.Text;
                    
                    db.Entry(User).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                }
                catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
                {
                    Exception raise = dbEx;
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            string message = string.Format("{0}:{1}",
                                validationErrors.Entry.Entity.ToString(),
                                validationError.ErrorMessage);
                            raise = new InvalidOperationException(message, raise);
                        }
                    }
                    throw raise;
                }
                catch (Exception dbEx)
                {
                    Exception raise = dbEx;
                    var val = dbEx.InnerException;
                    MessageBox.Show(val.ToString());
                    //throw raise;
                }
            }
            fillsearch();
        }

        private void cancel_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            AddGroup AG = new AddGroup();
            AG.Visible = true;
        }

        private void Group_EditValueChanged(object sender, EventArgs e)
        {
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.PermissionControls
                             where c.CGroupId.Equals(Group.EditValue.ToString())
                             select new
                             {
                                 c.Id,
                                 c.CGroupId,
                                 c.CAdmin,
                                 c.CSells,
                                 c.CBuys,
                                 c.CWarehouse,
                                 c.CVendorSupplier,
                                 c.CAccount,
                                 c.COther
                             };
                    var list = dc.ToList();
                    if (list.Count != 0)
                    {
                        if (list[0].COther)
                            Other.Checked = true;
                        else
                            Other.Checked = false;
                        if (list[0].CAccount)
                            Account.Checked = true;
                        else
                            Account.Checked = false;
                        if (list[0].CAdmin)
                            Admin.Checked = true;
                        else
                            Admin.Checked = false;
                        if (list[0].CSells)
                            Sells.Checked = true;
                        else
                            Sells.Checked = false;
                        if (list[0].CBuys)
                            Buys.Checked = true;
                        else
                            Buys.Checked = false;
                        if (list[0].CWarehouse)
                            Warehouse.Checked = true;
                        else
                            Warehouse.Checked = false;
                        if (list[0].CVendorSupplier)
                            VendorSupplier.Checked = true;
                        else
                            VendorSupplier.Checked = false;
                    }
                    
                
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            AddBranch AB = new AddBranch();
            AB.Visible = true;
        }
        private List<string> Datos()
        {

            List<string> listDatos = new List<string>();

            using (var db = new AccountingSystem())
            {
                var dc = from c in db.Users
                         //where c.Id.Equals(InvoiceID)
                         select new
                         {
                             c.Id,
                             c.UName
                         };
                var list = dc.ToList();
                for (int i = 0; i < list.Count; i++)
                {
                    listDatos.Add(list[i].UName.ToString());
                }

            }
            return listDatos;
        }
        private void fillsearch()
        {

            List<string> lista = Datos();
            search.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
            AutoCompleteStringCollection data = new AutoCompleteStringCollection();
            data.AddRange(lista.ToArray());
            search.AutoCompleteCustomSource = data;
            search.AutoCompleteSource = AutoCompleteSource.CustomSource;
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            save.Enabled = false;
            news.Enabled = true;
            update.Enabled = true;
            using (var db = new AccountingSystem())
            {
                var dc = from c in db.Users
                         where c.UName.Equals(search.Text)
                         select new
                         {
                             c.UCode,
                             c.UName,
                             c.UStatus,
                             c.UPassword,
                             c.UBranch,
                             c.UGroup,
                         };
                var list = dc.ToList();
                if (list.Count != 0)
                {
                    if (list[0].UStatus.Equals("True"))
                        Status.Checked = true;
                    else
                        Status.Checked = false;
                    Code.Text = list[0].UCode;
                    search.Text = list[0].UName;
                    Password.Text = list[0].UPassword;
                    Branch.Text = list[0].UBranch;
                    Group.Text = list[0].UGroup;
                }
                else
                {
                    MessageBox.Show("عفوا لا يوجد مستخدم بهذا الاسم", "تنبيه", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
    }
}
